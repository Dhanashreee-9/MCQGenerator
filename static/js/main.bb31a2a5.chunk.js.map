{"version":3,"sources":["Components/Flashcard.js","Components/FlashcardList.js","App.js","reportWebVitals.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","question","options","answer","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","FlashcardList","flashcards","id","App","setFlashCards","categories","setCategories","categoryEl","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","Fragment","onSubmit","e","preventDefault","params","amount","category","resp","results","questionsItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","name","type","min","step","defaultValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb31a2a5.chunk.js","sourcesContent":["import React,{useState,useEffect,useRef} from 'react';\r\n\r\n\r\n\r\nexport default function Flashcard({flashcard}) {\r\n    const[flip,setFlip] = useState(false)\r\n    const[height,setHeight] = useState('initial');\r\n\r\nconst frontEl = useRef();\r\nconst backEl = useRef();\r\n\r\nfunction setMaxHeight(){\r\n  const frontHeight = frontEl.current.getBoundingClientRect().height;\r\n  const backHeight = backEl.current.getBoundingClientRect().height;\r\n  setHeight(Math.max(frontHeight,backHeight,100))\r\n}\r\n\r\nuseEffect(setMaxHeight, [flashcard.question, flashcard.options ,flashcard.answer])\r\n\r\nuseEffect(()=>{\r\n  window.addEventListener('resize', setMaxHeight)\r\n  return () => window.removeEventListener('resize', setMaxHeight)\r\n},[])\r\n\r\n\r\n\r\n    return (\r\n        <div\r\n        className={`card ${flip ? 'flip' : ''}`}\r\n        style={{height : height}}\r\n        onClick={() => setFlip(!flip)}\r\n      >\r\n        <div className=\"front\" ref={frontEl} >\r\n          {flashcard.question}\r\n          <div className=\"flashcard-options\">\r\n            {flashcard.options.map(option => {\r\n              return <div className=\"flashcard-option\" key={option}>{option}</div>\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"back\" ref={backEl}>{flashcard.answer}</div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Flashcard from './Flashcard'\r\n\r\nexport default function FlashcardList({flashcards}) {\r\n    return (\r\n        <div className=\"card-grid\">\r\n            {\r\n                flashcards.map(flashcard=>{\r\n                  return  <Flashcard flashcard={flashcard} key={flashcard.id}/>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React,{useState,useEffect,useRef} from 'react';\nimport FlashcardList from './Components/FlashcardList';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n   const[flashcards,setFlashCards] =useState([]);\n   const [categories, setCategories] = useState([]);\n   const categoryEl=useRef()\n   const amountEl=useRef()\n\n   useEffect(() => {\n    axios\n      .get('https://opentdb.com/api_category.php')\n      .then(res => {\n        setCategories(res.data.trivia_categories)\n      })\n  }, [])\n\n  function decodeString(str){\n     const textArea = document.createElement('textArea');\n     textArea.innerHTML = str;\n     return textArea.value;\n   }\n\n  function handleSubmit(e){\n     e.preventDefault()\n     axios.get('https://opentdb.com/api.php?',{\n       params:{\n         amount: amountEl.current.value,\n         category:categoryEl.current.value,\n       }\n     }\n     )\n     .then(resp=>{\n   \n         setFlashCards(resp.data.results.map((questionsItem,index)=>{\n          const answer= decodeString(questionsItem.correct_answer);\n          const  options=[...questionsItem.incorrect_answers.map(a=>decodeString(a))\n            ,answer\n          ]\n          \n          return{\n            id: `${index} - ${Date.now()}`,\n            question: decodeString(questionsItem.question),\n            answer: answer,\n            options: options.sort(()=> Math.random() - .5)\n          }\n           \n         }))\n     })\n   }\n  return (\n    <React.Fragment>\n      <form className=\"header\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category</label>\n          <select id=\"category\" ref={categoryEl}>\n          {categories.map(category => {\n              return <option value={category.id} key={category.id}>{category.name}</option>\n            })}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Number of questions</label>\n          <input type=\"number\" id=\"amount\" min=\"1\" step=\"1\" defaultValue={10}\n          ref={amountEl}/>\n        </div>\n        <div className=\"form-group\">\n        <button className=\"btn\">generate</button>\n        </div>\n      </form>\n      <div className=\"container\">\n      <FlashcardList flashcards={flashcards}/>\n    </div>\n    </React.Fragment>\n    \n  );\n  }\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}